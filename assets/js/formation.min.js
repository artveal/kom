
/* Copyright 2013 by Hofmann Software Engineering (www.websoccer-sim.com). THIS IS NOT FREE SOFTWARE! */
$(function() {

	var CSS_CONFIG = {
		PITCH_POSITION: "position",
		PITCH_POSITION_LABEL: "positionLabel",
		PITCH_FREE_POSITION: "freePosition",
		PITCH_PLAYER_NAME: "positionPlayer",
		PITCH_PLAYER_REMOVE_LINK: "positionPlayerRemove",
		PITCH_PLAYER_STRENGTHBAR: "playerinfoStrength",
		PITCH_PLAYER_SHIRTNUMBER: "playerinfoShirtNumber",
		PITCH_POS_STATE_PRIMARY: "positionStatePrimary",
		PITCH_POS_STATE_SECONDARY: "positionStateSecondary",
		PITCH_POS_STATE_WRONG: "positionStateWrong",
		PITCH_PLAYER_STAMINA: "positionStamina",
		PITCH_PLAYER_STAMINA_BENCH :"positionStaminaBench",
		ACTIONLINK_REMOVE: "playerRemoveLink",
		ACTIONLINK_ADD_TO_PITCH: "playerAddToPitchLink",
		ACTIONLINK_ADD_TO_PITCH_ITEM: "playerAddToPitchLinkItem",
		ACTIONLINK_ADD_TO_BENCH: "playerAddToBenchLink",
		ACTIONLINK_CHANGE_FORMATION: "changeFormationLink",
		PLAYER_ON_PITCH: "playerIsOnPitch",
		PLAYER_INFO: "playerinfo",
		PLAYER_DRAGGABLE: "playerDraggable",
		PLAYER_ON_BENCH: "playerIsOnBench",
		BENCH_POSITION: "benchposition",
		BENCH_PLAYER_REMOVE_LINK: "benchPlayerRemove",
		BENCH_PLAYER_SUB_LINK: "benchPlayerSubAdd",
		BENCH_ACTIVE_SUBSTITUTION: "benchActiveSubstitution"
	};

	var SHIRT_BACKGROUND = "M291.99 23.09C286.22 24.53 276.44 26.45 270.25 27.35C264.06 28.26 253.38 29 246.5 29C239.63 29 230.51 28.54 226.25 27.97C221.99 27.41 213.55 26 207.5 24.85L196.5 22.76C177.13 33.59 168.35 38.32 164.5 40.25C160.65 42.18 147.82 48.14 136 53.49C124.17 58.84 107.08 66.95 98 71.51C84.59 78.24 80.37 80.89 75.5 85.65C71.72 89.33 68.05 94.28 65.58 99C63.43 103.13 58.34 116.4 54.29 128.5C50.23 140.6 42.25 165.57 36.56 184C30.86 202.43 23.79 225.24 20.85 234.69L15.5 251.88C19.38 255.03 24.1 257.83 28.5 260.13C32.9 262.43 42.35 266.23 49.5 268.57C56.65 270.91 66.1 273.57 70.5 274.49C74.9 275.41 83.45 276.41 89.5 276.71L100.5 277.27C107.09 270.09 109 268.23 109 268.5C109 268.77 109.44 272.26 109.99 276.25C110.53 280.24 111.65 290.14 112.49 298.25C113.32 306.36 114.68 323.24 115.5 335.75C116.44 349.96 117.01 374.08 117.02 400C117.04 439.56 117.14 441.71 119.08 446C120.19 448.48 122.77 452.22 124.8 454.32C126.84 456.43 131.2 459.67 134.5 461.52C137.8 463.38 143.65 466.1 147.5 467.57C151.35 469.05 157.65 471.1 161.5 472.14C165.35 473.18 174.13 474.99 181 476.18C192.26 478.12 198.08 478.37 239.5 478.72C277.53 479.05 287.75 478.84 298.5 477.51C305.65 476.62 316.23 474.97 322 473.84C327.77 472.71 337.9 470.23 344.5 468.32C351.1 466.42 359.65 463.37 363.5 461.55C368.11 459.37 371.78 456.76 374.25 453.87C376.69 451.01 378.55 447.42 379.6 443.5C381.01 438.25 381.14 432.26 380.61 395.5C380.28 372.4 379.73 345.63 379.4 336C378.94 322.63 379.19 315.55 380.44 306C381.35 299.13 383.17 289.23 384.49 284C385.81 278.77 387.4 273.15 388.03 271.5L389.17 268.5L395.91 276.5C418.07 274.55 427.88 273.27 432 272.39C436.13 271.52 444.23 269.25 450 267.36C455.77 265.46 465.23 261.93 471 259.51C476.77 257.09 482.06 254.41 482.75 253.56C483.5 252.62 483.66 251.5 483.14 250.75C482.66 250.06 481.97 247.47 481.6 245C481.23 242.53 479.12 232.63 476.9 223C474.69 213.38 471.06 198.07 468.85 189C466.64 179.93 463.27 166.88 461.38 160C459.48 153.13 456.53 143.22 454.82 138C453.12 132.78 449.27 121.97 446.28 114C443.29 106.03 439.77 97.7 438.47 95.5C437.16 93.3 434.16 89.6 431.8 87.28C428.54 84.09 422.78 80.86 408 73.94C397.27 68.92 377.7 59.54 364.5 53.1C351.3 46.65 332.85 37.17 323.5 32.04C314.15 26.91 305.6 22.21 304.49 21.59C302.92 20.71 300.23 21.03 291.99 23.09Z";
	
	// mark position labels as unselectable in order to prevent ugly effects on double click
	// $("." + CSS_CONFIG.PITCH_POSITION_LABEL).disableSelection();
	
	/**
	 * changes the formation system moving each position to the new one
	 */
	var changeFormationSystem = function(systemConfig) {
		var pos_index;
		for (pos_index = 1; pos_index <= 11; pos_index++) { 
			var indexing = "new_pos_" + pos_index
			var new_position = systemConfig["new_pos_" + pos_index];
			var old_position_div = $("#pos_index_" + pos_index);
			var old_positionText = old_position_div.attr("class").split(" ")[1];
			var new_positionText = new_position.split(".")[0]
			if (old_position_div.attr("data-mainposition").split(".").length > 1) {
				old_positionText = old_positionText + " " + old_position_div.attr("class").split(" ")[2];
			}
			if (new_position.split(".").length > 1) {
				new_positionText = new_positionText + " " + new_position.split(".")[1];
			}
			old_position_div.attr("data-mainposition", new_position);	// set mainposition attribute
			old_position_div.attr("class", old_position_div.attr("class").replace(old_positionText, new_positionText)); // set class
			
			// change hidden input field
			var playerField = $("#player_pos_" + pos_index);
			playerField.val(new_position.split(".")[0]);
			};
			
			// update player skill in new position
	};
	
	/**
	 * add specified player to specified target position.
	 */
	var addPlayerToPitch = function(playerId, targetPos) {
		var player = $("#playerinfo" + playerId);
		if (player.length == 0) {
			return false;
		}
		
		var targetPosition = $(".position." + targetPos + "." + CSS_CONFIG.PITCH_FREE_POSITION + ":first");
		var playerToSwap = 0;
		
		// is position already occupied?
		if (targetPosition.length == 0) {
			
			targetPosition = $(".position." + targetPos);
			// position does not exist
			if (targetPosition.length == 0) {
				return false;
			}
			
			// it is occupied.
			// prepare player to swap if player-to-add is already on pitch
			if (player.hasClass(CSS_CONFIG.PLAYER_ON_PITCH)) {
				playerToSwap = targetPosition.data("playerid");
			} else {
				return false;
			}
		}
		
		// do not add if player is on bench
		if (player.hasClass(CSS_CONFIG.PLAYER_ON_BENCH)) {
			return false;
		}
		
		// if player has been already on pitch, remove him, because user wants him to move to new position
		if (player.hasClass(CSS_CONFIG.PLAYER_ON_PITCH)) {
			
			var originalPosition = null;
			if (playerToSwap > 0) {
				originalPosition = $("." + CSS_CONFIG.PITCH_POSITION).filter(function() { return ($(this).data("playerid") == playerId); }).data("mainposition");
			}
			
			removePlayerFromPitch(playerId);
			
			// move player-to-swap 
			if (playerToSwap > 0) {
				removePlayerFromPitch(playerToSwap);
				addPlayerToPitch(playerToSwap, originalPosition);
			}
		}
		
		// do not add if blocked or injured
		if (player.data("matchesblocked") > 0) {
			return false;
		}
		
		// check position state
		var playerStrength = player.data("strength");
		targetPosition.addClass(CSS_CONFIG.PITCH_POS_STATE_PRIMARY);
		// targetPosition.css("background-color", player.data("bgcolor2"));	
		targetPosition.append("<div class=\"block\"><div class=\"shirt_block\"><svg class=\"shirt\" width=30 height=30 viewBox=\"0 0 500 500\"><path fill=\"" + player.data("bgcolor1") + "\" d=\"" + SHIRT_BACKGROUND + "\" /></svg><svg width=30 height=30 class=\"shirt\" viewBox=\"0 0 500 500\">)<use xlink:href=\"" + player.data("shirtstyle") + "\" fill=\" " + player.data("bgcolor2") + "\" ></use></svg></div>" + "<span class=\"" + CSS_CONFIG.PITCH_PLAYER_SHIRTNUMBER + "\">" 
				+ player.data("shirtnumber") + "</span></div>");		

		
		// add ID
		targetPosition.data("playerid", playerId);
		
		// add strength bar
		if (typeof playerStrength !== "undefined") {
			var progress_status = "#e9573e";
			if (playerStrength > 80) {
				progress_status = "#0c953b";
			} else if (playerStrength > 70) {
				progress_status = "#8dc153";
			} else if (playerStrength > 60) {
				progress_status = "#f6bb43";
			} else if (playerStrength > 50) {
				progress_status = "#e77e23";
			}
			targetPosition.append("<div class=\"badge badge-dark" + " " + CSS_CONFIG.PITCH_PLAYER_STRENGTHBAR + "\" style=\"background-color: " + progress_status + "\">" 
				+ playerStrength + "</div>");
		}
		
		// add team-shirt
		targetPosition.find(".positionLabel").hide();
		targetPosition.addClass("jersey");
		

		
		// add name div
		if (player.data("pname").length > 15) {
			var	scrollingName =  "class=\"playerName\" ";
		} else {
			var	scrollingName =  "";
		}
		targetPosition.append("<div class=\"" + CSS_CONFIG.PITCH_PLAYER_NAME + "\"><a "  + scrollingName + "href=\"#\">" + player.data("pname") + "</a></div>");
		
		// add stamina bar
		var	playerStaminaColor = "danger";
		if (player.data("freshness") > 70) {
			playerStaminaColor =  "success";
		} else if (player.data("freshness") > 40) {
			playerStaminaColor =  "warning";
		}
		targetPosition.append("<div class=\"" + CSS_CONFIG.PITCH_PLAYER_STAMINA + "\"><div style=\"height: 5px\" class=\"progress\"><div class=\"progress-bar bg-" + playerStaminaColor + "\" style=\"height: 5px; width: " + player.data("freshness") + "%\"></div></div></div>");
		
		
		
		/** add remove icon
		targetPosition.append("<a class=\"" + CSS_CONFIG.PITCH_PLAYER_REMOVE_LINK + "\" href=\"#\"><span class=\"fas fa-times\"></span></a>");*/
		
		// mark as on pitch
		player.addClass(CSS_CONFIG.PLAYER_ON_PITCH);
		
		// hide and show action links
		player.find("." + CSS_CONFIG.ACTIONLINK_REMOVE).css("display", "inline-block");
		player.find("." + CSS_CONFIG.ACTIONLINK_ADD_TO_PITCH).hide();
		player.find("." + CSS_CONFIG.ACTIONLINK_ADD_TO_BENCH).hide();
		
		targetPosition.removeClass(CSS_CONFIG.PITCH_FREE_POSITION);
		
		// add to hidden input field
		var playerField = $(".playerField[value=" + playerId + "]");
		if (!playerField.length) {
			playerField = $(".playerField[value='']:first");
			playerField.val(playerId);
		}
		playerField.next().val(targetPos.substring(0, 2));
		
		// add to selection for substitutions
		$(".playersOutSelection").append("<option value=\"" + playerId + "\">" + player.data("pname") + "</option>");
		
		// add to free kick taker selection
		$("#freekickplayer").append("<option value=\"" + playerId + "\">" + player.data("pname") + "</option>");
		
		// make draggable in order to move to new position
		targetPosition.draggable({ 
			revert: "invalid", 
			helper: "clone" 
		});
		
		return true;
	};
	
	/**
	 * Remove specified player from pitch
	 */
	var removePlayerFromPitch = function(playerId) {
		var positionDiv = $("." + CSS_CONFIG.PITCH_POSITION).filter(function() { return ($(this).data("playerid") == playerId); });
		
		positionDiv.removeData("playerid");
		positionDiv.find("." + CSS_CONFIG.PITCH_PLAYER_REMOVE_LINK).remove();
		positionDiv.find("." + CSS_CONFIG.PITCH_PLAYER_NAME ).remove();
		positionDiv.find("." + CSS_CONFIG.PITCH_PLAYER_STRENGTHBAR ).remove();
		
		positionDiv.removeClass(CSS_CONFIG.PITCH_POS_STATE_PRIMARY)
			.removeClass(CSS_CONFIG.PITCH_POS_STATE_SECONDARY)
			.removeClass(CSS_CONFIG.PITCH_POS_STATE_WRONG);
		
		positionDiv.addClass(CSS_CONFIG.PITCH_FREE_POSITION);
		
		var player = $("#playerinfo" + playerId);
		player.removeClass(CSS_CONFIG.PLAYER_ON_PITCH);
		player.find("." + CSS_CONFIG.ACTIONLINK_REMOVE).hide();
		player.find("." + CSS_CONFIG.ACTIONLINK_ADD_TO_PITCH).show();
		player.find("." + CSS_CONFIG.ACTIONLINK_ADD_TO_BENCH).show();
		
		// remove picture
		
		
		positionDiv.find(".block").remove();
		positionDiv.find(".positionPlayer").remove();
		positionDiv.find(".positionStamina").remove();
		positionDiv.find(".positionLabel").show();
		positionDiv.removeClass("jersey");
		positionDiv.css("background-color", "" );
		
		// remove selected player from selection for substitutions
		$(".playersOutSelection >option[value=\"" + playerId + "\"]").remove();
		
		// remove from free kick taker selection
		$("#freekickplayer >option[value=\"" + playerId + "\"]").remove();
		
		// remove from hidden input field
		var playerField = $(".playerField[value=" + playerId + "]");
		playerField.val("");
		playerField.next().val("");
	};
	
	/**
	 * Adds specified player to bench, if bench is not full.
	 * @returns false if not added (because player is invalid or already set), true if added.
	 */
	var addPlayerToBench = function(playerId) {
		var player = $("#playerinfo" + playerId);
		var targetPosition = $("." + CSS_CONFIG.BENCH_POSITION + "." + CSS_CONFIG.PITCH_FREE_POSITION + ":first");
		if (player.length == 0 || targetPosition.length == 0) {
			return false;
		}
		
		// do not add if already on pitch or bench
		if (player.hasClass(CSS_CONFIG.PLAYER_ON_PITCH) || player.hasClass(CSS_CONFIG.PLAYER_ON_BENCH)) {
			return false;
		}
		
		// do not add if blocked or injured
		if (player.data("matchesblocked") > 0) {
			return false;
		}
		
		// mark as on pitch
		player.addClass(CSS_CONFIG.PLAYER_ON_BENCH);
		
		targetPosition.data("playerid", playerId);
		
		// create player info at bench
		var playerInfoCell = targetPosition.find(" >.benchPlayerInfo");
		playerInfoCell.find(" >.benchPlaceholder").hide();
		
		playerInfoCell.addClass("positionBench");
		playerInfoCell.addClass(CSS_CONFIG.PITCH_POS_STATE_PRIMARY);
		playerInfoCell.css("background-color", player.data("bgcolor2") );	
		playerInfoCell.append("<div class=\"" + CSS_CONFIG.PITCH_PLAYER_SHIRTNUMBER + "\" style=\"background-color: " + player.data("bgcolor1") + "\">" 
				+ player.data("shirtnumber") + "</div>");		
		
		// add strength bar
		var playerStrength = player.data("strength");
		if (typeof playerStrength !== "undefined") {
			var progress_status = "#e9573e";
			if (playerStrength > 80) {
				progress_status = "#0c953b";
			} else if (playerStrength > 70) {
				progress_status = "#8dc153";
			} else if (playerStrength > 60) {
				progress_status = "#f6bb43";
			} else if (playerStrength > 50) {
				progress_status = "#e77e23";
			}
			playerInfoCell.append("<div class=\"badge badge-dark" + " " + CSS_CONFIG.PITCH_PLAYER_STRENGTHBAR + "\" style=\"background-color: " + progress_status + "\">" 
				+ playerStrength + "</div>");
		}
		
		// add name div
		if (player.data("pname").length > 12) {
			var	scrollingName =  "class=\"playerName\" ";
		} else {
			var	scrollingName =  "";
		}
		playerInfoCell.append("<div class=\"" + CSS_CONFIG.PITCH_PLAYER_NAME + "\"><a "  + scrollingName + "href=\"#\" style=\"-webkit-text-stroke: 0.6px black; color: #000;\">" + player.data("pname") + "</a></div>");
		
		// add stamina bar
		var	playerStaminaColor = "danger";
		if (player.data("freshness") > 70) {
			playerStaminaColor =  "success";
		} else if (player.data("freshness") > 40) {
			playerStaminaColor =  "warning";
		}
		playerInfoCell.append("<div class=\"" + CSS_CONFIG.PITCH_PLAYER_STAMINA + "\"><div style=\"height: 5px\" class=\"progress\"><div class=\"progress-bar bg-" + playerStaminaColor + "\" style=\"height: 5px; width: " + player.data("freshness") + "%\"></div></div></div>");
		
		
		// hide and show action links
		player.find("." + CSS_CONFIG.ACTIONLINK_REMOVE).css("display", "inline-block");
		player.find("." + CSS_CONFIG.ACTIONLINK_ADD_TO_PITCH).hide();
		player.find("." + CSS_CONFIG.ACTIONLINK_ADD_TO_BENCH).hide();
		
		//targetPosition.find("." + CSS_CONFIG.BENCH_PLAYER_REMOVE_LINK).show();
		
		if ($("." + CSS_CONFIG.BENCH_ACTIVE_SUBSTITUTION).length < 3) {
			targetPosition.find("." + CSS_CONFIG.BENCH_PLAYER_SUB_LINK).show();
		}
		
		targetPosition.removeClass(CSS_CONFIG.PITCH_FREE_POSITION);
		
		// add to hidden input field
		var playerIndex = targetPosition.index() + 1;
		$("#bench" + playerIndex).val(playerId);
		
		return true;
	};
	
	/**
	 * Remove specified player from bench
	 */
	var removePlayerFromBench = function(playerId) {
		var positionDiv = $("." + CSS_CONFIG.BENCH_POSITION).filter(function() { return ($(this).data("playerid") == playerId); });
		
		removeSubstitution(positionDiv);
		
		positionDiv.removeData("playerid");
		
		positionDiv.removeClass(CSS_CONFIG.PITCH_POS_STATE_PRIMARY)
			.removeClass(CSS_CONFIG.PITCH_POS_STATE_SECONDARY)
			.removeClass(CSS_CONFIG.PITCH_POS_STATE_WRONG);
		positionDiv.addClass(CSS_CONFIG.PITCH_FREE_POSITION);
		
		positionDiv.find("." + CSS_CONFIG.PITCH_PLAYER_STRENGTHBAR ).remove();		
		positionDiv.find(".benchPlayer").remove();
		positionDiv.find(".playerinfoShirtNumber").remove();
		positionDiv.find(".positionPlayer").remove();
		positionDiv.find(".positionStamina").remove();
		positionDiv.find(".positionLabel").show();
		positionDiv.removeClass("positionBench");
		positionDiv.css("background-color", "" );
		positionDiv.find(".benchPlaceholder").show();
		
		var player = $("#playerinfo" + playerId);
		player.removeClass(CSS_CONFIG.PLAYER_ON_BENCH);
		player.find("." + CSS_CONFIG.ACTIONLINK_REMOVE).hide();
		player.find("." + CSS_CONFIG.ACTIONLINK_ADD_TO_PITCH).show();
		player.find("." + CSS_CONFIG.ACTIONLINK_ADD_TO_BENCH).show();
		
		positionDiv.find("." + CSS_CONFIG.BENCH_PLAYER_REMOVE_LINK).hide();
		positionDiv.find("." + CSS_CONFIG.BENCH_PLAYER_SUB_LINK).hide();
		
		// remove from hidden input field
		var playerIndex = positionDiv.index() + 1;
		$("#bench" + playerIndex).val("");
	};
	
	/**
	 * Add substitution. Saves it to hidden input fields and enables details display.
	 */
	var addSubstitution = function(playerInId, playerOutId, minute, condition, position) {
		if (!playerInId || !playerOutId || !minute || minute < 1 || minute > 90) {
			return false;
		}
		
		var playerIn = $("#playerinfo" + playerInId);
		var playerOut = $("#playerinfo" + playerOutId);
		
		if (playerIn.length == 0 || playerOut.length == 0) {
			return false;
		}
		
		// check if players are on pitch respectively on bench
		if (!playerIn.hasClass(CSS_CONFIG.PLAYER_ON_BENCH) || !playerOut.hasClass(CSS_CONFIG.PLAYER_ON_PITCH)) {
			return false;
		}
		
		// check if already 3 subs configured
		var numberOfExistingSubs = $("." + CSS_CONFIG.BENCH_ACTIVE_SUBSTITUTION).length;
		if (numberOfExistingSubs >= 3) {
			return false;
		}
		
		// get bench position
		var benchPosition = $("." + CSS_CONFIG.BENCH_POSITION).filter(function() { return ($(this).data("playerid") == playerInId); });
		
		// insert information at bench
		benchPosition.find(".benchPlayerSubInfoMinute").text(minute);
		
		var outPlayerInfo = benchPosition.find(".benchPlayerSubInfoPlayer");
		outPlayerInfo.text(playerOut.data("pname"));
		outPlayerInfo.data("playerid", playerOutId);
		
		benchPosition.find(".benchPlayerSubInfo").show();
		
		benchPosition.find(".benchPlayerSubAdd").hide();
		
		if (condition) {
			benchPosition.find(".benchPlayerSubInfoCondition" + condition).show();
		}
		
		if (position) {
			var positionInfoElement = benchPosition.find(".benchPlayerSubInfoPosition");
			positionInfoElement.show();
			positionInfoElement.find(".subPositionLabel").text(benchPosition.find("option[value=" +  position + "]").text());
		}
		
		// remove selected player from selection for other subs
		$(".playersOutSelection >option[value=\"" + playerOutId + "\"]").remove();
		
		benchPosition.addClass(CSS_CONFIG.BENCH_ACTIVE_SUBSTITUTION);
		
		// hide substitutin buttons in case this is the third sub
		if (numberOfExistingSubs == 2) {
			$("." + CSS_CONFIG.BENCH_PLAYER_SUB_LINK).hide();
		}
		
		// add to hidden input fields
		var subNo = numberOfExistingSubs + 1;
		$("#sub" + subNo + "_out").val(playerOutId);
		$("#sub" + subNo + "_in").val(playerInId);
		$("#sub" + subNo + "_minute").val(minute);
		$("#sub" + subNo + "_condition").val(condition);
		$("#sub" + subNo + "_position").val(position);
		return true;
	};
	
	// remove player link on pitch handler
	$(document).on("click", "." + CSS_CONFIG.PITCH_PLAYER_REMOVE_LINK, function(event){
		event.preventDefault();
		
		var positionDiv = $(this).parent();
		removePlayerFromPitch(positionDiv.data("playerid"));
	});
	
	// remove player link handler (link in players selection list)
	$("." + CSS_CONFIG.ACTIONLINK_REMOVE).click(function(event) {
		event.preventDefault();
		
		var player = $(this).closest("." + CSS_CONFIG.PLAYER_INFO);
		if (player.hasClass(CSS_CONFIG.PLAYER_ON_PITCH)) {
			removePlayerFromPitch(player.data("playerid"));
		} else {
			removePlayerFromBench(player.data("playerid"));
		}
		
	});
	
	// enable player removal by double click
	$("." + CSS_CONFIG.PITCH_POSITION).dblclick(function(event) {

		removePlayerFromPitch($(this).data("playerid"));
	});
	
	// change formation link handler
	$("." + CSS_CONFIG.ACTIONLINK_CHANGE_FORMATION).click(function(event) {
		
		changeFormationSystem($(this).data())
	});
	
	// add player link handler
	$("." + CSS_CONFIG.ACTIONLINK_ADD_TO_PITCH_ITEM).click(function(event) {
		event.preventDefault();
		
		var player = $(this).closest("." + CSS_CONFIG.PLAYER_INFO);
		addPlayerToPitch(player.data("playerid"), $(this).data("target"));
	});
	
	// enable dragging
	$("." + CSS_CONFIG.PLAYER_DRAGGABLE).draggable({ 
		revert: "invalid", 
		helper: "clone" 
	});
	
	// enable dropping on pitch
	$("." + CSS_CONFIG.PITCH_POSITION).droppable({ 
		hoverClass: "playerDropHover",
		drop: function(event, ui) {
			addPlayerToPitch(ui.draggable.data("playerid"), $(this).data("mainposition"));
		}
	});
	
	// enable dropping on bench
	$("." + CSS_CONFIG.BENCH_POSITION).droppable({ 
		hoverClass: "playerDropHover",
		drop: function(event, ui) {
			addPlayerToBench(ui.draggable.data("playerid"));
		}
	});
	
	var positionIsOccupied = function(testPosition) {
		if ($(".position." + testPosition + "." + CSS_CONFIG.PITCH_FREE_POSITION + ":first").length == 0) {
			return true;
		}
		
		return false;
	};
	
	// enable double clicking on a player, which tries to move him to his primary position. If occupied, use secondary position
	$("." + CSS_CONFIG.PLAYER_DRAGGABLE).dblclick(function(event) { 
		var position = $(this).data("mainposition");
		
		if (!position || positionIsOccupied(position)) {
			
			// take secondary position
			position = $(this).data("secondposition");
			
			// else take any free position within his position
			if (!position || positionIsOccupied(position)) {
				positionDiv = $(".position." + CSS_CONFIG.PITCH_FREE_POSITION + "[data-position=" + $(this).data("position") + "]:first");
				
				// also everything occupied, then cancel
				if (positionDiv.length == 0) {
					return;
				}
				
				position = positionDiv.data("mainposition");
			}
		}
		
		addPlayerToPitch($(this).data("playerid"), position);
	});
	
	// add player to bench link handler
	$("." + CSS_CONFIG.ACTIONLINK_ADD_TO_BENCH).click(function(event) {
		event.preventDefault();
		
		var player = $(this).closest("." + CSS_CONFIG.PLAYER_INFO);
		addPlayerToBench(player.data("playerid"));
	});
	
	// remove player link on pitch handler
	$(document).on("click", "." + CSS_CONFIG.BENCH_PLAYER_REMOVE_LINK, function(event){
		event.preventDefault();
		
		var positionDiv = $(this).closest("." + CSS_CONFIG.BENCH_POSITION);
		removePlayerFromBench(positionDiv.data("playerid"));
	});
	
	// save substitution handler
	$(".saveSubstitutionBtn").click(function(event) {
		
		var positionElement = $(this).closest("." + CSS_CONFIG.BENCH_POSITION);
		
		var playerInId = positionElement.data("playerid");
		var minute = positionElement.find("input[id^=\"sub_minute\"]").val();
		var playerOutId = positionElement.find(".playersOutSelection").val();
		var condition = positionElement.find("select[id^=\"sub_condition\"]").val();
		var position = positionElement.find("select[id^=\"sub_position\"]").val();
		
		addSubstitution(playerInId, playerOutId, minute, condition, position);
	});
	
	// remove substitution handler
	$(".removeSubstitutionBtn").click(function(event) {
		event.preventDefault();
		
		var positionElement = $(this).closest("." + CSS_CONFIG.BENCH_POSITION);
		removeSubstitution(positionElement);

	});
	
	/**
	 * Cancels the specified substitution.
	 */
	var removeSubstitution = function(positionElement) {
		// add player back to substitution selection
		var playerOutId = positionElement.find(".benchPlayerSubInfoPlayer").data("playerid");
		var playerOut = $("#playerinfo" + playerOutId);
		$(".playersOutSelection").append("<option value=\"" + playerOutId + "\">" + playerOut.data("pname") + "</option>");
		
		positionElement.find(".benchPlayerSubInfo").hide();
		
		positionElement.find(".benchPlayerSubInfoConditionTie").hide();
		positionElement.find(".benchPlayerSubInfoConditionLeading").hide();
		positionElement.find(".benchPlayerSubInfoConditionDeficit").hide();
		
		positionElement.removeClass(CSS_CONFIG.BENCH_ACTIVE_SUBSTITUTION);
		
		// display add buttons which have been hided before
		$("." + CSS_CONFIG.BENCH_POSITION + ":not(." + CSS_CONFIG.BENCH_ACTIVE_SUBSTITUTION + ",." + CSS_CONFIG.PITCH_FREE_POSITION + ") .benchPlayerSubAdd").show();
	
		// remove from hidden input fields
		var subNo = $(".subsInputOutPlayer[value=\"" + playerOutId + "\"]").data("subno");
		if (subNo > 0) {
			$("#sub" + subNo + "_out").val("");
			$("#sub" + subNo + "_in").val("");
			$("#sub" + subNo + "_minute").val("");
			$("#sub" + subNo + "_condition").val("");
			$("#sub" + subNo + "_position").val("");
		}
		
	};
	
	// clear all
	$(".clearAllBtn").click(function(event) {
		event.preventDefault();
		
		$("." + CSS_CONFIG.PITCH_POSITION).each(function(index, element) {
			removePlayerFromPitch($(this).data("playerid"));
		});
		
		$("." + CSS_CONFIG.BENCH_POSITION).each(function(index, element) {
			removePlayerFromBench($(this).data("playerid"));
		});
	});
	
	// submit setup form with pre-filled positions
	$(".formationSetupSubmit").click(function(event) {
		event.preventDefault();
		
		$("#preselect").val($(this).data("preselect"));
		
		$(this).closest("form").submit();
	});
	
	// add pre-selected players on document load
	for (var playerIndex = 1; playerIndex <= 11; playerIndex++) {
		var preSelectedPlayer = $("#player_id_" + playerIndex).val();
		if (preSelectedPlayer > 0) {
			var playerAdded = addPlayerToPitch(preSelectedPlayer, $("#player_pos_" + playerIndex).val());
			if (!playerAdded) {
				$("#player_id_" + playerIndex).val("");
			}
		}
	}
	for (var benchIndex = 1; benchIndex <= 7; benchIndex++) {
		var preSelectedPlayer = $("#subplayer_id_" + benchIndex).val();
		if (preSelectedPlayer > 0) {
			var benchPlayerAdded = addPlayerToBench(preSelectedPlayer);
			if (!benchPlayerAdded) {
				$("#subplayer_id_" + benchIndex).val("");
			}
		}
	}
	
	// add pre-saved substitutions
	for (var subNo = 1; subNo <= 3; subNo++) {
		var playerOutId = $("#sub" + subNo + "_out").val();
		var playerInId = $("#sub" + subNo + "_in").val();
		var minute = $("#sub" + subNo + "_minute").val();
		var condition = $("#sub" + subNo + "_condition").val();
		var position = $("#sub" + subNo + "_position").val();
		if (playerOutId > 0 && playerInId > 0 && minute > 0) {
			var subAdded = addSubstitution(playerInId, playerOutId, minute, condition, position);
			if (!subAdded) {
				$("#sub" + subNo + "_out").val("");
				$("#sub" + subNo + "_in").val("");
				$("#sub" + subNo + "_minute").val("");
				$("#sub" + subNo + "_condition").val("");
				$("#sub" + subNo + "_position").val("");
			}
		}
	}
	
	// pre-selected free kick taker
	var preSelectedFreekickPlayer = $("#freekickplayer").data("preselect");
	if (preSelectedFreekickPlayer) {
		$("#freekickplayer").val(preSelectedFreekickPlayer);
	}
	
});