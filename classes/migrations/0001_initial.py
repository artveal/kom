# Generated by Django 3.0.5 on 2020-04-25 23:58

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(max_length=40, unique=True)),
                ('email', models.EmailField(max_length=254)),
                ('active', models.BooleanField(default=True)),
                ('admin', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Competition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40)),
                ('tier', models.PositiveIntegerField(default=1)),
                ('association', models.CharField(max_length=25)),
                ('competition_type', models.CharField(choices=[('local', 'Local'), ('international', 'International'), ('national_teams', 'National teams')], default='local', max_length=15)),
                ('active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='CompetitionRound',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40)),
                ('competition_format', models.CharField(choices=[('league', 'League'), ('cup', 'Cup')], default='league', max_length=15)),
                ('number_of_rounds', models.PositiveIntegerField(default=2)),
                ('untie_rule', models.CharField(choices=[('league', 'League'), ('cup', 'Cup')], default='local', max_length=15)),
                ('final_round', models.BooleanField(default=False, help_text='If enabled, the winner will be recognized as champion in its career section')),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='classes.Competition')),
            ],
        ),
        migrations.CreateModel(
            name='CompetitionSeason',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='classes.Competition')),
            ],
        ),
        migrations.CreateModel(
            name='CompetitionSeasonRound',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40)),
                ('competition_format', models.CharField(choices=[('league', 'League'), ('cup', 'Cup')], default='league', max_length=15)),
                ('number_of_rounds', models.PositiveIntegerField(default=2)),
                ('untie_rule', models.CharField(choices=[('league', 'League'), ('cup', 'Cup')], default='local', max_length=15)),
                ('final_round', models.BooleanField(default=False, help_text='If enabled, the winner will be recognized as champion in its career section')),
                ('competition_season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='classes.CompetitionSeason')),
            ],
        ),
        migrations.CreateModel(
            name='Nation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40)),
                ('abbr', models.CharField(max_length=4, unique=True)),
                ('association', models.CharField(blank=True, max_length=15)),
                ('path', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Season',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('transfer_market_1_start', models.DateField()),
                ('transfer_market_1_end', models.DateField()),
                ('transfer_market_2_start', models.DateField()),
                ('transfer_market_2_end', models.DateField()),
                ('weather_type_start', models.PositiveIntegerField(default=1, validators=[django.core.validators.MaxValueValidator(4), django.core.validators.MinValueValidator(1)])),
                ('weather_type_end', models.PositiveIntegerField(default=1, validators=[django.core.validators.MaxValueValidator(4), django.core.validators.MinValueValidator(1)])),
            ],
        ),
        migrations.CreateModel(
            name='Sponsor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40)),
            ],
        ),
        migrations.CreateModel(
            name='Stadium',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40)),
                ('city', models.CharField(max_length=20)),
                ('capacity', models.CharField(max_length=20)),
                ('maintenance', models.IntegerField(default=5, validators=[django.core.validators.MaxValueValidator(0), django.core.validators.MinValueValidator(5)])),
                ('services', models.IntegerField(default=5, validators=[django.core.validators.MaxValueValidator(0), django.core.validators.MinValueValidator(5)])),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40)),
                ('abbr', models.CharField(max_length=4, unique=True)),
                ('shirt1_style', models.CharField(default='style1', max_length=7, verbose_name='Home shirt style')),
                ('shirt1_color1', models.CharField(default='#ffffff', max_length=7, verbose_name='Home shirt main color')),
                ('shirt1_color2', models.CharField(default='#000000', max_length=7, verbose_name='Home shirt details color')),
                ('shirt2_style', models.CharField(default='style1', max_length=7, verbose_name='Away shirt style')),
                ('shirt2_color1', models.CharField(default='#000000', max_length=7, verbose_name='Away shirt main color')),
                ('shirt2_color2', models.CharField(default='#ffffff', max_length=7, verbose_name='Away shirt details color')),
                ('budget', models.IntegerField(default=0)),
                ('elo_points', models.IntegerField(default=0)),
                ('playable', models.BooleanField(default=True)),
                ('active', models.BooleanField(default=True)),
                ('manager', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('national_team', models.ForeignKey(blank=True, help_text='Leave blank if team is not a national team', null=True, on_delete=django.db.models.deletion.SET_NULL, to='classes.Nation', verbose_name='National team')),
                ('sponsor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='classes.Sponsor', verbose_name='Sponsor')),
                ('stadium', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='classes.Stadium', verbose_name='Stadium')),
            ],
        ),
        migrations.CreateModel(
            name='Weather',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40)),
                ('season_1_temperature', models.IntegerField(default=25, help_text='in Celsius degrees')),
                ('season_1_rain', models.IntegerField(default=25, help_text='percent. Chances to have rain or snow', validators=[django.core.validators.MaxValueValidator(0), django.core.validators.MinValueValidator(100)])),
                ('season_2_temperature', models.IntegerField(default=25, help_text='in Celsius degrees')),
                ('season_2_rain', models.IntegerField(default=25, help_text='percent. Chances to have rain or snow', validators=[django.core.validators.MaxValueValidator(0), django.core.validators.MinValueValidator(100)])),
                ('season_3_temperature', models.IntegerField(default=25, help_text='in Celsius degrees')),
                ('season_3_rain', models.IntegerField(default=25, help_text='percent. Chances to have rain or snow', validators=[django.core.validators.MaxValueValidator(0), django.core.validators.MinValueValidator(100)])),
                ('season_4_temperature', models.IntegerField(default=25, help_text='in Celsius degrees')),
                ('season_4_rain', models.IntegerField(default=25, help_text='percent. Chances to have rain or snow', validators=[django.core.validators.MaxValueValidator(0), django.core.validators.MinValueValidator(100)])),
            ],
        ),
        migrations.CreateModel(
            name='TeamPerformance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.IntegerField(default=0)),
                ('scored_goals', models.IntegerField(default=0)),
                ('received_goals', models.IntegerField(default=0)),
                ('wins', models.IntegerField(default=0)),
                ('draws', models.IntegerField(default=0)),
                ('losses', models.IntegerField(default=0)),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='classes.CompetitionSeasonRound')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='classes.Team')),
            ],
        ),
        migrations.CreateModel(
            name='QualifyingRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.PositiveIntegerField(default=1)),
                ('economic_reward', models.IntegerField(default=0)),
                ('from_round', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='from_round', to='classes.CompetitionRound')),
                ('to_round', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='to_round', to='classes.CompetitionRound')),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=100)),
                ('short_name', models.CharField(max_length=40)),
                ('age', models.PositiveIntegerField()),
                ('n_shirt_number', models.PositiveIntegerField(null=True, validators=[django.core.validators.MaxValueValidator(99), django.core.validators.MinValueValidator(1)], verbose_name='National team shirt number')),
                ('position1', models.CharField(choices=[('GK', 'Goalkeeper'), ('CD', 'Centre Defender'), ('LD', 'Left Defender'), ('RD', 'Right Defender'), ('LW', 'Left Wingback'), ('RW', 'Right Wingback'), ('DM', 'Defensive Midfielder'), ('CM', 'Centre Midfielder'), ('LM', 'Left Midfielder'), ('RM', 'Right Midfielder'), ('OM', 'Offensive Midfielder'), ('CF', 'Centre Forward'), ('LF', 'Left Forward'), ('RF', 'Right Forward')], default='GK', max_length=2)),
                ('position2', models.CharField(blank=True, choices=[('GK', 'Goalkeeper'), ('CD', 'Centre Defender'), ('LD', 'Left Defender'), ('RD', 'Right Defender'), ('LW', 'Left Wingback'), ('RW', 'Right Wingback'), ('DM', 'Defensive Midfielder'), ('CM', 'Centre Midfielder'), ('LM', 'Left Midfielder'), ('RM', 'Right Midfielder'), ('OM', 'Offensive Midfielder'), ('CF', 'Centre Forward'), ('LF', 'Left Forward'), ('RF', 'Right Forward')], default='', max_length=2)),
                ('position3', models.CharField(blank=True, choices=[('GK', 'Goalkeeper'), ('CD', 'Centre Defender'), ('LD', 'Left Defender'), ('RD', 'Right Defender'), ('LW', 'Left Wingback'), ('RW', 'Right Wingback'), ('DM', 'Defensive Midfielder'), ('CM', 'Centre Midfielder'), ('LM', 'Left Midfielder'), ('RM', 'Right Midfielder'), ('OM', 'Offensive Midfielder'), ('CF', 'Centre Forward'), ('LF', 'Left Forward'), ('RF', 'Right Forward')], default='', max_length=2)),
                ('position4', models.CharField(blank=True, choices=[('GK', 'Goalkeeper'), ('CD', 'Centre Defender'), ('LD', 'Left Defender'), ('RD', 'Right Defender'), ('LW', 'Left Wingback'), ('RW', 'Right Wingback'), ('DM', 'Defensive Midfielder'), ('CM', 'Centre Midfielder'), ('LM', 'Left Midfielder'), ('RM', 'Right Midfielder'), ('OM', 'Offensive Midfielder'), ('CF', 'Centre Forward'), ('LF', 'Left Forward'), ('RF', 'Right Forward')], default='', max_length=2)),
                ('defending', models.FloatField(default=100, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(1)])),
                ('passing', models.FloatField(default=100, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(1)])),
                ('shooting', models.FloatField(default=100, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(1)])),
                ('dribbling', models.FloatField(default=100, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(1)])),
                ('stamina', models.FloatField(default=100, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(1)])),
                ('pace', models.FloatField(default=100, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(1)])),
                ('strength', models.FloatField(default=100, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(1)])),
                ('potential', models.FloatField(validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(1)])),
                ('fitness', models.IntegerField(default=100, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(1)])),
                ('injury_time', models.IntegerField(default=0)),
                ('domestic_susp', models.IntegerField(default=0, verbose_name='Domestic competitions suspension')),
                ('int_susp', models.IntegerField(default=0, verbose_name='Int. club competitions suspension')),
                ('nt_susp', models.IntegerField(default=0, verbose_name='National team suspension')),
                ('active', models.BooleanField(default=True)),
                ('transfer_status', models.CharField(choices=[('Tr', 'Transferable'), ('NTrn', 'Non transferable'), ('unset', 'Non set')], default='unset', max_length=5)),
                ('loan_status', models.CharField(choices=[('Loa', 'Available loan'), ('NLoa', 'Non available loan'), ('unset', 'Non set')], default='unset', max_length=5)),
                ('t_shirt_number', models.PositiveIntegerField(null=True, validators=[django.core.validators.MaxValueValidator(99), django.core.validators.MinValueValidator(1)], verbose_name='Team shirt number')),
                ('salary', models.IntegerField(default=0)),
                ('contract_length', models.IntegerField(default=0)),
                ('youth_team', models.BooleanField(default=False)),
                ('loan_contrib', models.IntegerField(default=0, verbose_name='Loan contribution')),
                ('loan_length', models.IntegerField(default=0)),
                ('loan_by_team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='loan_team', to='classes.Team', verbose_name='Loan team')),
                ('nationality', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='classes.Nation', verbose_name='Nationality')),
                ('team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='team', to='classes.Team', verbose_name='Contract team')),
            ],
        ),
        migrations.CreateModel(
            name='News',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=20)),
                ('abstract', models.TextField(blank=True, max_length=400)),
                ('content', models.TextField(blank=True, max_length=4000)),
                ('pub_date', models.DateTimeField(default=datetime.datetime.now)),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'News',
            },
        ),
        migrations.AddField(
            model_name='competitionseason',
            name='season',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='classes.Season'),
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40)),
                ('latitude', models.FloatField(default=0, validators=[django.core.validators.MaxValueValidator(90), django.core.validators.MinValueValidator(-90)])),
                ('longitude', models.FloatField(default=0, validators=[django.core.validators.MaxValueValidator(180), django.core.validators.MinValueValidator(-180)])),
                ('nation', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='classes.Nation')),
                ('weather', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='classes.Weather')),
            ],
        ),
    ]
